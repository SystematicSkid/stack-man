#include <corecrt.h>
#include <cstdint>
#include <cstdio>
#include <Windows.h>
#include <cassert>
#include <chrono>

#include "macros.hpp"

/* VM */
#include "vm_ctx.hpp"
#include "vm.hpp"

/* Parser */
#include "parser/parser.hpp"

/* Our VM */
#include "vms/password_check_heavy.hpp"

class test_vm
{
private:
	int a;
	int b;
	int c;
public:
	test_vm()
	{
		this->a = 0;
		this->b = 0;
		this->c = 1337;
	}
	
	int get_c_native()
	{
		return this->c;
	}

	int get_c_virtualized()
	{
		std::uint8_t vm_code[] =
		{
			0x00, 0x2C, 0x66, 0x69, 0x32, 0xEC, 0x99, 0xBB, 0xE0, 0x0F, 0x14, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8C, 0x1A, 0xA5, 0x03, 0x04, 0x0C, 0x87, 0x20, 0x0F, 0x26, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCD, 0xAF, 0xE6, 0xB1, 0xBE, 0x83, 0xC1, 0x18, 0x0F, 0x80, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x0F, 0x10, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x0F, 0x68, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x0F, 0x08, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x0F, 0xC4, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x0D, 0x79, 0x5A, 0x65, 0x1D, 0xBA, 0x45, 0x0F, 0x91, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE1, 0x4C, 0xE3, 0x0C, 0x7C, 0x33, 0x6C, 0x6F, 0x0F, 0xFB, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x0F, 0x99, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x0F, 0xB7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0F, 0xB3, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x0F, 0xD6, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1A, 0x63, 0xA8, 0xA7, 0x48, 0x81, 0x46, 0x72, 0x0F, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA1, 0xF3, 0xBC, 0x4A, 0x74, 0x0B, 0x4A, 0x08, 0x0F, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x0F, 0xCB, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x0F, 0x0D, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x0F, 0xFE, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x0F, 0x64, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x0F, 0x72, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x0F, 0xC0, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0F, 0x1A, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x0F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x0F, 0x9C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9E, 0xC6, 0xD9, 0xF3, 0x75, 0x42, 0x5F, 0x28, 0x0F, 0xC1, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0xFF, 0xBE, 0x06, 0xC0, 0x64, 0xA3, 0x5D, 0x0F, 0x3F, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x0F, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x48, 0xE3, 0xD4, 0xDF, 0xC2, 0x81, 0x23, 0xE5, 0x0F, 0xFD, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x0F, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xD6, 0xB1, 0x66, 0xC3, 0xC8, 0x36, 0xC5, 0x0F, 0xA4, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x19, 0x2F, 0xC9, 0x24, 0x77, 0xB6, 0xFA, 0x93, 0x0F, 0x90, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x0F, 0x0B, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE9, 0x1C, 0x6D, 0x01, 0x5E, 0xFB, 0xA5, 0x67, 0x0F, 0x81, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0xDA, 0xEC, 0xC3, 0x23, 0x18, 0x41, 0x39, 0x0F, 0x57, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1D, 0x00, 0xE8, 0x7B, 0xC0, 0x1E, 0xFF, 0xA7, 0x0F, 0xCA, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x09, 0x0F, 0x9B, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x82, 0xCD, 0xEA, 0x22, 0x22, 0xD5, 0x4F, 0xC6, 0x0F, 0x97, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x82, 0xDB, 0x35, 0xC9, 0xF6, 0xC6, 0xAE, 0xA7, 0x0F, 0xB7, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x0F, 0xF3, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x2C, 0x70, 0xC4, 0x93, 0x5E, 0xB4, 0x93, 0x0F, 0x56, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB6, 0xE3, 0x96, 0x56, 0xA2, 0xEE, 0xBD, 0x4A, 0x0F, 0x32, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x0F, 0xF1, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87, 0x64, 0x50, 0x0A, 0x81, 0xC6, 0x31, 0xB7, 0x0F, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0F, 0x46, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC5, 0xF9, 0xF7, 0x25, 0xDB, 0xB2, 0x35, 0xE1, 0x0F, 0x4D, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x73, 0x78, 0xD5, 0x70, 0x1F, 0x23, 0x6B, 0x77, 0x0F, 0xA2, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x09, 0x0F, 0x8E, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x0F, 0x49, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAF, 0x32, 0xFA, 0x6A, 0xFF, 0x06, 0xF3, 0x33, 0x0F, 0xCC, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x8F, 0xF1, 0xCD, 0xD2, 0x32, 0x03, 0x09, 0x0F, 0xDC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x05, 0x0F, 0xFD, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x09, 0x0F, 0x42, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xFD, 0xF9, 0xAC, 0xE9, 0xE2, 0xCB, 0xE1, 0xE9, 0x0F, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x0F, 0x94, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x0F, 0xF1, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0xBD, 0xBA, 0x19, 0xCB, 0x95, 0x95, 0x24, 0x0F, 0x99, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xF6, 0x0E, 0x4E, 0x7E, 0xD6, 0xB9, 0x07, 0x0F, 0xCF, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x9B, 0x11, 0xAF, 0xDD, 0xBB, 0xCF, 0x14, 0xD3, 0x0F, 0xE0, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x09, 0x0F, 0x1D, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x92, 0xC3, 0x4B, 0x37, 0x8D, 0x30, 0xCB, 0x0F, 0xFA, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xD0, 0x50, 0xD5, 0xEA, 0xBF, 0x68, 0xD5, 0xE4, 0x0F, 0x57, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x0E, 0xEB, 0xD9, 0x0A, 0xED, 0x6A, 0x24, 0x1E, 0x0F, 0x8B, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAA, 0x49, 0x9C, 0xF1, 0x8F, 0xDA, 0x4D, 0x70, 0x0F, 0x57, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x0B, 0xCC, 0xF6, 0x83, 0xE0, 0xBC, 0x0A, 0xC8, 0x0F, 0x3C, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x0F, 0x6D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x0F, 0x6E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB5, 0x41, 0x01, 0x79, 0x06, 0xC1, 0x76, 0x28, 0x0F, 0x2A, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x0F, 0xD3, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x60, 0x15, 0xA0, 0x22, 0x2D, 0x69, 0x08, 0xA1, 0x0F, 0xFD, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEE, 0xBD, 0xEF, 0x47, 0x71, 0x23, 0x50, 0xA4, 0x0F, 0xF7, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x69, 0xE6, 0x19, 0xA6, 0x91, 0x4A, 0xC1, 0x0F, 0xDF, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x0F, 0x6F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xDE, 0x06, 0x1E, 0x02, 0xD2, 0x21, 0x8B, 0x05, 0x0F, 0xFB, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x0F, 0x3A, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xEC, 0x30, 0x8D, 0x2D, 0x4A, 0x99, 0x48, 0x44, 0x0F, 0x6F, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x13, 0x4F, 0x63, 0x04, 0x54, 0x44, 0xC8, 0x0F, 0xDC, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x83, 0xE1, 0x19, 0xAB, 0x42, 0x4C, 0x75, 0xB7, 0x0F, 0xED, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9C, 0xEE, 0x41, 0xCA, 0xEC, 0xDB, 0x74, 0xB0, 0x0F, 0x13, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xD2, 0xE2, 0x73, 0x18, 0x33, 0x0A, 0x7B, 0x0F, 0x4C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x0F, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x1E, 0x2B, 0xBC, 0x15, 0xD7, 0x60, 0xC6, 0x0F, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x0F, 0x4C, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x09, 0x0F, 0x46, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x0F, 0x57, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x51, 0x1C, 0x3D, 0x3D, 0x85, 0x57, 0xCD, 0xDA, 0x0F, 0xBF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x0F, 0xEE, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x09, 0x0F, 0xF0, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x09, 0x0F, 0x9D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x0F, 0xE7, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD8, 0x11, 0x8E, 0x9D, 0x9A, 0x76, 0xA4, 0x94, 0x0F, 0x9B, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0F, 0x87, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x09, 0x0F, 0xBF, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x1D, 0xB7, 0x7F, 0x09, 0x66, 0x76, 0x25, 0xA4, 0x0F, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBE, 0x3E, 0x24, 0x18, 0xD8, 0xA7, 0xD3, 0xB5, 0x0F, 0x3B, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x80, 0xE8, 0xBC, 0x06, 0xE4, 0x0C, 0x83, 0x3F, 0x0F, 0xF9, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x09, 0x0F, 0xE9, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x09, 0x2B, 0x65, 0xE7, 0x5F, 0xB3, 0xD1, 0x45, 0x0F, 0x2A, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x0F, 0xD7, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x09, 0x0F, 0x03, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x09, 0x0F, 0xF2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCB, 0xB0, 0xFD, 0xA8, 0x60, 0xAF, 0x58, 0x8C, 0x0F, 0x4B, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x09, 0x0F, 0xAB, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x17, 0xDA, 0x2E, 0xEB, 0xDA, 0x71, 0x50, 0x9B, 0x0F, 0x27, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x09, 0x0F, 0x07, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x09, 0x0F, 0xC9, 0xFB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xF9, 0x70, 0xF5, 0x5C, 0x13, 0x3E, 0x3B, 0xF1, 0x0F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xDA, 0x10, 0x1A, 0x8A, 0x0D, 0xC9, 0xA9, 0x09, 0x0F, 0x56, 0xFA, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x04, 0x0F, 0x6F, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xFE, 0xD6, 0x09, 0x1D, 0x7D, 0xBD, 0x26, 0xE6, 0x0F, 0x0E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x09, 0x0F, 0x8D, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x09, 0x0F, 0x60, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x32, 0x08, 0x0B, 0x44, 0xC9, 0x63, 0x86, 0x0B, 0x0F, 0x28, 0xFA, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xD4, 0xC5, 0xB8, 0x1F, 0xF9, 0x08, 0x3E, 0x0B, 0x0F, 0xC5, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x09, 0x0F, 0xA7, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xA3, 0x46, 0xC1, 0x61, 0xB6, 0x98, 0x4A, 0xC6, 0x0F, 0xF0, 0xF9, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x09, 0x0F, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE4, 0x71, 0xF8, 0x4B, 0x42, 0xD9, 0xB1, 0xB9, 0x0F, 0xA4, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x0F, 0xAB, 0xFB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x09, 0x0F, 0x35, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x05, 0x0F, 0x6B, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x8E, 0x48, 0x16, 0xB1, 0x89, 0x8D, 0xAC, 0x0E, 0x0F, 0x4A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBE, 0x05, 0xC0, 0x9D, 0x5D, 0x7E, 0x20, 0x4D, 0x0F, 0xEF, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x09, 0x0F, 0xF1, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x3C, 0xF6, 0x52, 0x04, 0x54, 0x13, 0xF1, 0xB3, 0x0F, 0x11, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x09, 0x0F, 0x77, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xB7, 0xB3, 0xFA, 0x25, 0x55, 0xDE, 0x5C, 0xD4, 0x0F, 0xAF, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x09, 0x0F, 0xED, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x0E, 0x28, 0x7F, 0x17, 0xC6, 0x43, 0x91, 0x10, 0x0F, 0x52, 0xF9, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xF4, 0xCB, 0x3B, 0x54, 0xD9, 0xA6, 0x83, 0xE2, 0x0F, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8D, 0x64, 0x2B, 0xA8, 0xE3, 0x8C, 0x98, 0xF7, 0x0F, 0x37, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x9F, 0x4F, 0x00, 0x16, 0x07, 0x71, 0x83, 0x88, 0x0F, 0x70, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x09, 0x0F, 0xE2, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x05, 0x0F, 0xC8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x0F, 0x9D, 0xFA, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x47, 0x64, 0x38, 0x60, 0x80, 0xA2, 0x76, 0xD8, 0x0F, 0x8E, 0xF9, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x04, 0x0F, 0x7D, 0xFB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x09, 0x0F, 0x1A, 0xF9, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x09, 0x0F, 0x1A, 0xF9, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x09, 0x0F, 0x0C, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x09, 0x0F, 0x15, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xFE, 0xC4, 0x49, 0x16, 0x40, 0x2F, 0xA2, 0x96, 0x0F, 0x40, 0xF9, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x04, 0x0F, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCD, 0xA6, 0x43, 0x1C, 0x18, 0xC3, 0x37, 0x90, 0x0F, 0xBA, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x06, 0xF9, 0xC7, 0x06, 0xC6, 0x81, 0x30, 0xC9, 0x0F, 0xAF, 0xFB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x14, 0x05, 0x0F, 0x2D, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xC0, 0x4A, 0xD1, 0x03, 0x92, 0x65, 0x46, 0xB6, 0x0F, 0x47, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
		};
		stack_vm* vm = new stack_vm();
		vm->push((std::size_t)this);
		/* Execute our program */
		std::int32_t result = vm->execute((uintptr_t)vm_code);
		return result;
	}
};

std::size_t test_fnv_hash(char* first, std::size_t len)
{
	std::size_t val = 2166136261U;
	for (std::size_t i = 0; i < len; i++)
	{
		val ^= static_cast<std::size_t>(first[i]);
		val *= 16777619U;
	}
	return val;
}


bool test_program(std::string target_program, std::size_t expected_result)
{
	for (int i = 0; i < 100; i++)
	{
		vm_parser* parser = (new vm_parser())
			->add_pass(new obfuscate_unfolding_pass(3/*iter*/, 3/*depth*/))
			->add_pass( new obfuscate_constant_pass( 4 ) )
			;
		

		std::uintptr_t program = NULL;
		std::int32_t size = 0;
		bool err = parser->parse_file(target_program.c_str(), &program, &size);

		if (!err)
		{
			printf("[ - ] Failed to parse program!\n");
			parser->display_errors();
			return 1;
		}

		delete parser;

		/* Create VM */
		stack_vm* vm = new stack_vm();
		/* Execute our program */
		std::int32_t result = vm->execute((uintptr_t)program);
		/* Delete program */
		delete[](std::uint8_t*)program;
		//delete vm;
		if (result != expected_result)
			return false;
	}
	return true;
}

int main( )
{
	printf("[ + ] Stack-Man!\n");
	srand(time(0));

	/* Test programs */
	//bool works = test_program("vms\\test.vm", 8008136);
	//printf("Test Result: %d\n", works);
	//return 0;
	//test_vm* klass = new test_vm();
	///* Start timing benchmark */
	//auto start = std::chrono::high_resolution_clock::now();
	//int c_native = klass->get_c_native();
	//auto end = std::chrono::high_resolution_clock::now();
	//auto duration = std::chrono::duration_cast<std::chrono::nanoseconds>(end - start);
	//printf("Native: %d (%d ns)\n", c_native, duration.count());
	///* Start benchmark */
	//start = std::chrono::high_resolution_clock::now();
	//int c_virtualized = klass->get_c_virtualized();
	//end = std::chrono::high_resolution_clock::now();
	//duration = std::chrono::duration_cast<std::chrono::nanoseconds>(end - start);
	//printf("Virtualized: %d (%d ns)\n", c_virtualized, duration.count());
	//return 0;
	
	
	/* Create parser */
	
	vm_parser* parser = (new vm_parser( ) )
		//->add_pass( new obfuscate_unfolding_pass( 1/*iter*/, 1/*depth*/ ) )
		//->add_pass( new obfuscate_constant_pass( 2 ) )
		//->add_pass( new obfuscate_chunking_pass( 2 ) )
		;
	
	std::string target_program = "vms\\fnv1a.vm";
	
	std::uintptr_t program = NULL;
	std::int32_t size = 0;
	bool err = parser->parse_file(target_program.c_str( ), &program, &size);
	
	if (!err)
	{
		printf( "[ - ] Failed to parse program!\n" );
		parser->display_errors( );
		return 1;
	}
	int is_pressing_enter = GetAsyncKeyState(12);
	
	printf("Size: %d\n", is_pressing_enter);
	
	/* Write program to `vms\\password_check_heavy.hpp` */
	//std::ofstream out("vms\\password_check_heavy.hpp");
	//out << "#pragma once\n";
	//out << "std::uint8_t program[] = {\n";
	//for (int i = 0; i < size; i++)
	//{
	//	out << (int)((std::uint8_t*)program)[i] << ", ";
	//}
	//out << "};\n";
	//
	//delete parser;
	//
	//return 0;

	delete parser;

	char test_buffer[] = "abcd";
	std::size_t test_hash = test_fnv_hash(test_buffer, 4);
	printf("Test Hash: %d\n", test_hash);
	
	/* Hash buffer using std::hash */
	//std::hash<std::string> hasher;
	//std::size_t hash = hasher("abcd");
	//printf("Hash: %d\n", hash);
	

	/* Create VM */
	stack_vm* vm = new stack_vm( );
	vm->push(4);
	vm->push((std::size_t)test_buffer);
	/* Execute our program */
	std::int32_t result = vm->execute( (uintptr_t)program );
	
	printf("Result: %d\n", result);

	if (result == 1)
	{
		/* Display congrats */
		printf("[ + ] Congratulations on defeating the evil VM!\n");
		std::system( "pause");
		return 1;
	}

	printf("[ - ] Failed to defeat the evil VM!\n");
	std::system( "pause" );

	return 0;
}